## АиП | Билет - 8 ##
1. Массивы и указатели в Си, связь между ними.
2. Передача массивов и указателей как параметров процедур.

===== Массивы и указатели в Си, связь между ними =====
# Массивы
* Массивы в Си - это последовательность элементов одного типа, которые хранятся в смежных ячейках памяти.
``` Объявления массива
int arr[5]; // массив из 5 элементов типа int
```
* Указатели - это переменные, хранящие адрес памяти
``` Объявление указателя:
int *ptr; // Указатель на переменную типа int
```

===== Передача массивов и указателей как параметров процедур =====
# Передача массива в функцию
* При передаче массива в функцию передается указатель на его первый элемент.
* Размер массива нужно указывать явно или использовать дополнительные параметры.
``` Пример
void printArray(int *arr, int size)
{
    for (int i = 0; i < size; i++)
    {
        printf("%d ", *(arr + i));
    }
    printf("\n");
}

int main(void)
{
    int arr[5] = {1, 2, 3, 4, 5};
    printArray(arr, 5);

    return 0;
}
```

===== Передача указателя в функцию =====
* Указатель передается по значению, но позволяет изменять значения по адресу

``` Пример
void me(int *elem)
{
    *elem = 42; // изменение значения по адресу
}

int main(void)
{
    int x = 10;
    printf("До изменения: %d", x);
    me(%x); // передаем адрес переменной x
    printf("После изменения: %d", x);

    return 0;
}
```


===== Советы =====
1. При передаче массива используйте указатель, чтобы избежать копирование данных.
2. Для больших массивов всегда указывайте их рамер как отдельный параметр.
3. Убедитесь, что указатели не выходят за границу массива.
4. Используйте const для предотвращения изменения массива внутри функции:
```
void printArray(const int *arr, int size);
```
в данном примере мы можем поменять сам указатель, но при этом данные, на которые он ссылается - изменить не получится, они const