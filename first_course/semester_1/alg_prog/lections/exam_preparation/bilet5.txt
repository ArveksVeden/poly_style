## АиП | Билет - 5 ##
1. Массивы и указатели в языке Си.
2. Связь между массивами и указателями и их представление.

===== Массивы в языке Си =====
>> Массив - это структура данных, представляющая собой упорядоченный набор элементов одного типа, хранящихся в непрерывной области памяти.

# Основные характеристики массивов
1. Тип массива:
* все элементы массива имеют одинаковый тип данных.
2. Размер массива:
* Указывается при объявлении и фиксируется (например: int arr[11]).
3. Доступ к элементам:
* Элементы массива доступны по индексу, начиная с нуля (arr[0], arr[1], ...).
4. Объявление массива:
* Одномерный массив.
``` int arr[5]; // массив из 5 целых чисел
* Двумерный массив.
``` int arr[3][4]; // матрица 3x4
5. Инициализация:
* явная инициализация.
``` int arr[5] = {1, 2, 3, 4, 5};
* частичная инициализация.
``` int arr[5] = {1, 2}; // остальные элементы обнуляются
6. Особенности:
* имя массива (arr) является указателем на его первый элемент ($arr[0]).

===== Указатели в языке Си =====
>> Указатель - это переменная, хранящая адрес другой переменной.

# Основные свойства указателей
1. Объявление указателя.
``` int *p; // указатель на целое число
2. Инициализация указателя.
``` int a = 10;
``` int *p = &a; // указатель p хранит адрес переменной a
3. Разыменовывание указателя.
``` int value = *p; // значение переменной a присваивается в переменной value
4. Арифметика указателей.
* Указатели можно увеличивать или уменьшать (например, p++), что изменяет адрес на величину размера типа данных

===== Связь между массивами и указателями =====
>> Массивы и указатели тесно связаны, так как имя массива является указателем на его первый элемент.

# Основные аспекты связи
1. Имя массива:
* arr эквивалентно $arr[0].
* однако arr - это константный указатель, его нельзя изменять.
2. Доступ к элементам массива:
* через индексы
``` arr[2] // доступ к третьему элементу.
* через указатели
``` *(arr + 2) // доступ к третьему элементу.
3. Передача массива в функцию:
* В функции массив передается как указатель на его первый элемент.
```
void printArray(int *arr, int size)
{
    for (int i = 0; i < size; i++)
    {
        printf("%d ", *(arr + i));
    }
    printf("\n")
}
```