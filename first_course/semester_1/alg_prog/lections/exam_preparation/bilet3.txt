## АиП | Билет - 3 ##
1. Основные управляющие конструкции в Си;
2. Понятие инварианта цикла и его применение.

===== Основные управляющие конструкции в Си ===== 
>> Управляющие конструкции в языке Си обеспечивают выполнение последовательностей команд, ветвлений, повторений и других операций
1. Условные операторы:
* if и if-else
- Предназначены для выполнения блока кода при выполнении условия
* switch-case
- Используется для многовариантного выбора:
```
switch (user_num)
{
    case 1:
        printf("Tellson's bank office");
        break
    case 2:
        ...
        break
    default:
        // код по умолчанию
}
```
2. Операторы цикла:
* for - итерирует блок кода заданное количество раз.
```
for (int i = 0; i < size; i++) {}
```
* while - выполняет блок кода, пока условие истинно.
```
while (условие) {}
```
* do-while - гарантирует хотя бы одну итерацию цикла, даже если условие ложно
```
do
{

} while (условие);
```
3. Операторы перехода:
* break - прерывает выполнение цикла или оператора switch.
* continue - переходит к следующей итерации цикла.
* goto - позволяет перейти к заранее определенной метке (использовать осторожно).
```
goto метка;
// ...
метка:
```
* return - завершает выполнение функции и возвращает результат.

===== Понятие инварианта цикла и его применение =====
>> Инвариант цикла - это логическое утверждение, которое остается истинным на каждой итерации цикла.
1. Свойства инварианта:
* Выполняется до начала первой итерации цикла;
* Сохраняет истинность после каждой итерации;
* Помогает доказать корректность алгоритма.
2. Применение инварианта:
* Анализ корректности алгоритмов
- Инвариант формализует правильность промежуточных вычислений.
* Пример инварианта (нахождение максимума):
```
int max = arr[0];
for (int i = 0; i < n; i++)
{
    if (arr[i] > max)
    {
        max = arr[i]
    }
}
// Инвариант: max всегда содержит максимальное значение из просмотренных элементов.
```
* Проверка завершения цикла
- Инвариант можно использовать для определения условий остановки
* Упрощение доказательств
- С помощью инварианта легче обосновать корректность сложных алгоритмов
3. Практические рекомендации:
* Выделить ключевую переменную, которая должна оставаться стабильной в процессе работы.
* Записывать инварианты в явной форме (обычно как математические выражения).
