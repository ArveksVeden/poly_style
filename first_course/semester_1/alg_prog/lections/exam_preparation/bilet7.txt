## АиП | Билет - 7 ##
1. Процедуры и функции в Си.
2. Формальные и фактические.
3. Входные и выходные данные параметры.
4. Локальные и глобальные переменные.

===== Процедуры и функции в Си =====
>> В языке Си процедуры и функции реализуются как функции. Различие в том, что:
* функция возвращает значение (например, int func()).
* Процедура - функция, которая ничего не возвращает (объявляется с типом void).

``` Синтаксис объявления функции
return_type func(parameters)
{
    ...
    return value;
}
```

``` Пример
#include <stdio.h>

int add(int num1, int num2)
{
    return num1 + num2;
}

void printMassage()
{
    pritntf("Это пример процедуры.\n);
}

int main(void)
{
    int result = add(3, 5);
    printf("Результат сложения: %d\n", result);
    printMassage();

    return 0;
}
```

===== Формальные и фактические параметры =====
1. Формальные параметры:
* Параметры, указанные в объявении функции.
* Они выступают как локальные переменные внутри функции.

```
int sum(int a, int b) // a и b - формальные параметры
{
    return a + b;
}
```

2. Фактические параметры:
* Значения, передаваемые функции при её вызове.
```
int result = sum(10, 20) // 10 и 20 - фактические параметры
```

# Важные моменты
* Формальные параметры инициализируются копиями фактических параметров (механизм передачи параметров по значению).

===== Входные и выходные параметры =====
1. Входные параметры:
* Используются для передачи данных в функцию.
``` Пример
int multiply(int a, int b) // a и b - выходные параметры
{
    return a * b;
}
```
2. Выходные параметры:
* Используются для передачи данных из функции (обычно через указатели).
``` Пример

void divide(int a, int b, int *quotient, int *remainder)
{
    *quotient = a / b;
    *remainder = a % b;
}

int main(void)
{
    int q, r;
    divide(10, 3, &q, &r);
    printf("Результаты деления: \n");
    printf("Частное: %d, Остаток: %d", q, r);
    return 0;
}
```

===== Локальные и глобальные переменные =====
1. Локальные переменные:
* Объявляются внутри функций или блоков кода.
* Доступны только в пределах своей функции.
``` Пример
void example()
{
    int local_var = 10; // локальная переменная
    printf("Локальная переменная: %d\n", local_var);
}
```

2. Глобальные переменные:
* Объявляются вне всех функций.
* Доступны всем функциям в программе.
``` Пример

int globalVar = 20;
void printGlobal()
{
    printf("Глобальная переменная: %d\n", globalVar);
}

int main(void)
{
    printGlobal();
    return 0;
}
```

# Советы
1. Используйте локальные переменные, чтобы избежать конфликтов имен и повысить читаемость кода.
2. Глобальные переменные применяйте только при необходимости общего состояния между функциями.
3. Для возврата нескольких значений из функции используйте указатели или структуры.